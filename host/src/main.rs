// These constants represent the RISC-V ELF and the image ID generated by risc0-build.
// The ELF is used for proving and the ID is used for verification.
use methods::{
    NTT_GUEST_ELF, NTT_GUEST_ID
};
use risc0_zkvm::{default_prover, ExecutorEnv, Receipt};
use serde::{Serialize, Deserialize};
use rand::Rng;
use std::time::Instant;
use chrono::{DateTime, Utc};
use serde_json;
use std::fs;


#[derive(Serialize, Deserialize)]
struct Benchmark {
    receipt: Receipt,
    image_id: [u32; 8],
    duration_msecs: u128,
    timestamp: DateTime<Utc>,
}

#[derive(Serialize, Deserialize)]
struct NTT {
    n: usize,
    p: u32,
    data: Vec<u32>,
}

fn generate_ntt_input() -> NTT {
    let mut rng = rand::thread_rng();
    let n = 512;
    NTT {
        n: n,
        p: 1062862849,
        data: (0..n).map(|_| rng.gen_range(0..n as u32)).collect(),
    }
}

fn main() {
    // Initialize tracing. In order to view logs, run `RUST_LOG=info cargo run`
    tracing_subscriber::fmt()
        .with_env_filter(tracing_subscriber::filter::EnvFilter::from_default_env())
        .init();

    // An executor environment describes the configurations for the zkVM
    // including program inputs.
    // An default ExecutorEnv can be created like so:
    // `let env = ExecutorEnv::builder().build().unwrap();`
    // However, this `env` does not have any inputs.
    //
    // To add add guest input to the executor environment, use
    // ExecutorEnvBuilder::write().
    // To access this method, you'll need to use ExecutorEnv::builder(), which
    // creates an ExecutorEnvBuilder. When you're done adding input, call
    // ExecutorEnvBuilder::build().

    // For example:
    // let input: u32 = 15 * u32::pow(2, 27) + 1;
    let ntt_input = generate_ntt_input();
    let now = Instant::now();
    let env = ExecutorEnv::builder()
        .write(&ntt_input)
        .unwrap()
        .build()
        .unwrap();

    // Obtain the default prover.
    let prover = default_prover();

    // Produce a receipt by proving the specified ELF binary.
    let receipt = prover
        .prove(env, NTT_GUEST_ELF)
        .unwrap();
    let elapsed = now.elapsed();
    println!("Elapsed: {:.2?}", elapsed);
    
    // For example:
    // let _output: u32 = receipt.journal.decode().unwrap();

    let benchmark_result = Benchmark {
        receipt: receipt,
        image_id: NTT_GUEST_ID,
        duration_msecs: elapsed.as_millis(),
        timestamp: Utc::now(),
    };
    let s = serde_json::to_string(&benchmark_result).unwrap();
    fs::write("/home/prince/residue/benchmark", s).expect(
        "Benchmark write to file error"
    );   
}
